
/**
 * The first line in the build configuration applies the Android plugin for
 * Gradle to this build and makes the android block available to specify
 * Android-specific build options.
 */
apply plugin: 'com.android.application'

/**
 * The android block is where you configure all your Android-specific
 * build options.
 */
android {

    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */
    compileSdkVersion 27

    /**
     * The defaultConfig block encapsulates default settings and entries for all
     * build variants, and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */
    defaultConfig {

        /**
         * applicationId uniquely identifies the package for publishing.
         * However, your source code should still reference the package name
         * defined by the package attribute in the main/AndroidManifest.xml file.
         */
        applicationId "com.danosoftware.galaxyforce"

        // Defines the minimum API level required to run the app.
        minSdkVersion 14

        // Specifies the API level used to test the app.
        targetSdkVersion 27

        // Defines the version number of your app.
        versionCode 4

        // Defines a user-friendly version name for your app.
        versionName "0.04"
    }

    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies Proguard settings and is not signed by default.
     */
    buildTypes {

        debug {
            // gets variable from environment variable
            // may not be available at run-time
            buildConfigField 'String', "BILLING_API_KEY", "System.getenv(\"APIKEY\")"
            resValue 'string', "RES_BILLING_API_KEY", "System.getenv(\"APIKEY\")"

            // hard-codes value into configuration at build time
            // value will always be available at run-time
            def os = System.getenv('OS')
            buildConfigField 'String', "BILLING_API_KEY3", "\"$os\""
            buildConfigField 'String', "BILLING_API_KEY2", "$System.env.APIKEY"
            resValue 'string', "RES_BILLING_API_KEY2", "$System.env.APIKEY"
            resValue 'string', "public_key1", "\"$os\""
            resValue 'string', "public_key2", "\"$os\""
            resValue 'string', "public_key3", "\"$os\""
            resValue 'string', "public_key4", "\"$os\""

            /**
             * To avoid storing public keys in our source repository we can pass them
             * in at build time as environment variables.
             *
             * These can be added as either BuildConfig objects...
             * def value = System.getenv('ENV_VAR')
             * buildConfigField 'String', "MY_ITEM", "\"$value\""
             *
             * ... or as resources...
             * def value = System.getenv('ENV_VAR')
             * resValue 'string', "MY_ITEM", "\"$value\""
             *
             * Can be retrieved from Java using...
             * String value = BuildConfig.MY_ITEM;
             * ..or...
             * String value = activity.getResources().getText(R.string.MY_ITEM).toString();
             *
             * Could also retrieve from global gradle.properties
             * see: https://medium.com/code-better/hiding-api-keys-from-your-android-repository-b23f5598b906
             */
        }

        /**
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the Proguard settings file.
         */
        release {
            minifyEnabled true // Enables code shrinking for the release build type.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

/**
 * The dependencies block in the module-level build configuration file
 * only specifies dependencies required to build the module itself.
 *
 * If you're using Android plugin 3.0.0 or higher, you should
 * use the new dependency configurations, which help you improve build speeds by
 * restricting which dependencies leak their APIs to other modules.
 */
dependencies {
    implementation 'com.android.support:support-v4:27.0.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.4'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.4'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.8.0'
    testImplementation 'org.slf4j:slf4j-api:1.7.7'
    testImplementation 'ch.qos.logback:logback-classic:1.1.2'
    testImplementation 'ch.qos.logback:logback-core:1.1.2'
    testImplementation 'org.powermock:powermock-api-mockito2:1.7.3'
    testImplementation 'org.powermock:powermock-module-junit4:1.7.3'
}
