
/**
 * The first line in the build configuration applies the Android plugin for
 * Gradle to this build and makes the android block available to specify
 * Android-specific build options.
 */
apply plugin: 'com.android.application'

/**
 * The android block is where you configure all your Android-specific
 * build options.
 */
android {

    /**
     * This signings config allows the application to be signed when developing
     * on a local device in debug mode. This is essential to test Google Play Services.
     * To avoid adding these key details into our source code, the key-values can be
     * stored within gradle.properties.
     *
     * These properties are optional to allow builds to succeed without them.
     * This also allows builds to succeed on Circle CI.
     *
     * We do not include "release" signing configs as release builds are normally
     * built from Android Studio, where key details must be supplied manually.
     */
    if(project.hasProperty("KEYSTORE_FILE")) {
        signingConfigs {
            debug {
                storeFile file("$KEYSTORE_FILE")
                storePassword "$KEYSTORE_PASSWORD"
                keyAlias = "$KEY_ALIAS"
                keyPassword "$KEY_PASSWORD"
            }
        }
    }

    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     */
    compileSdkVersion 28

    /**
     * The defaultConfig block encapsulates default settings and entries for all
     * build variants, and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */
    defaultConfig {

        /**
         * applicationId uniquely identifies the package for publishing.
         * However, your source code should still reference the package name
         * defined by the package attribute in the main/AndroidManifest.xml file.
         */
        applicationId "com.danosoftware.galaxyforce"

        // Defines the minimum API level required to run the app.
        minSdkVersion 14

        // Specifies the API level used to test the app.
        targetSdkVersion 28

        // Defines the version number of your app.
        versionCode 21

        // Defines a user-friendly version name for your app.
        versionName "0.21"
    }

    /**
     * The buildTypes block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies Proguard settings and is not signed by default.
     */
    buildTypes {

        /**
         * To avoid storing public keys in our source repository we can pass them
         * in at build time. The values are stored in the global gradle.properties file
         * ($HOME/.gradle/gradle.properties).
         *
         * Could also retrieve from environment variables.
         *
         * see:
         * https://medium.com/code-better/hiding-api-keys-from-your-android-repository-b23f5598b906
         * http://www.kiodev.com/circle-ci-and-gradle-properties/
         *
         * When building in a remote environment (e.g. a CI server), the
         * "environmentSetup.sh" script can populate gradle.properties on the remote
         * server using environment variables.
         */

        debug {
            // uses gradle properties to populate API keys in BuildConfig
            buildConfigField 'String', "public_key1", "\"$PUBLIC_KEY1\""
            buildConfigField 'String', "public_key2", "\"$PUBLIC_KEY2\""
            buildConfigField 'String', "public_key3", "\"$PUBLIC_KEY3\""
            buildConfigField 'String', "public_key4", "\"$PUBLIC_KEY4\""
        }

        /**
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the Proguard settings file.
         */
        release {
            // uses gradle properties to populate API keys in BuildConfig
            buildConfigField 'String', "public_key1", "\"$PUBLIC_KEY1\""
            buildConfigField 'String', "public_key2", "\"$PUBLIC_KEY2\""
            buildConfigField 'String', "public_key3", "\"$PUBLIC_KEY3\""
            buildConfigField 'String', "public_key4", "\"$PUBLIC_KEY4\""

            minifyEnabled true // Enables code shrinking for the release build type.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }
}

/**
 * The dependencies block in the module-level build configuration file
 * only specifies dependencies required to build the module itself.
 *
 * If you're using Android plugin 3.0.0 or higher, you should
 * use the new dependency configurations, which help you improve build speeds by
 * restricting which dependencies leak their APIs to other modules.
 */
dependencies {
    implementation 'com.android.billingclient:billing:1.2'
    implementation 'com.google.android.gms:play-services-games:18.0.1'
    implementation 'com.google.android.gms:play-services-auth:17.0.0'
    implementation('com.google.apis:google-api-services-drive:v3-rev173-1.25.0') {
        exclude group: 'org.apache.httpcomponents'
    }
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.4'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.4'
    implementation 'androidx.annotation:annotation:1.1.0'

    // dependency below stops build parcelable error on release builds.
    // play-services libraries bring in an earlier version (with a bug) of this library.
    // see: https://stackoverflow.com/questions/57601897/android-studio-3-5-warning-the-rule-keep-public-class-extends-androidx-vers
    implementation "androidx.versionedparcelable:versionedparcelable:1.1.0"

    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.mockito:mockito-core:2.23.0'
    testImplementation 'org.slf4j:slf4j-api:1.7.7'
    testImplementation 'ch.qos.logback:logback-classic:1.1.2'
    testImplementation 'ch.qos.logback:logback-core:1.1.2'
    testImplementation 'org.powermock:powermock-api-mockito2:2.0.0'
    testImplementation 'org.powermock:powermock-module-junit4:2.0.0'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
}
